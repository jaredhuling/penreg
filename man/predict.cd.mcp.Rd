% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coord_mcp.R
\name{predict.cd.mcp}
\alias{predict.cd.mcp}
\title{prediction function for coordinate descent MCP}
\usage{
\method{predict}{cd.mcp}(object, newx, s = NULL, which.gamma = NULL,
  type = c("response", "coefficients", "nonzero"), exact = FALSE, ...)
}
\arguments{
\item{object}{Fitted "cd.mcp" model object}

\item{newx}{Matrix of new values for x at which predictions are to be made. Must be a matrix. 
This argument is not used for type=c("coefficients","nonzero")}

\item{s}{Value(s) of the penalty parameter lambda at which predictions are required. 
Default is the entire sequence used to create the model.}

\item{which.gamma}{Index or indices of gamma values at which predictions are to be made. 
Default is all those used in the fit}

\item{type}{"response" returns fitted predictions at newx. Type "coefficients" computes the coefficients at 
the requested values for s. Type "nonzero" returns lists of the indices of the nonzero coefficients for 
each value of s.}

\item{exact}{By default (exact=FALSE) the predict function uses linear interpolation to make predictions for values 
of s that do not coincide with those used in the fitting algorithm. Currently exact=TRUE is not implemented, 
but prints an error message telling the user how to achieve the exact predictions. This is done my rerunning 
the algorithm with the desired values interspersed (in order) with the values used in the original fit}

\item{...}{Not used.}
}
\examples{
set.seed(123)
n = 1000
p = 50
b = c(runif(10), rep(0, p - 10))
x = matrix(rnorm(n * p, sd = 3), n, p)
y = drop(x \%*\% b) + rnorm(n)

## fit lasso model with 100 tuning parameter values
res <- cd.mcp(x, y, gamma = 4)

coefs <- predict(res, type = "coef")

}
